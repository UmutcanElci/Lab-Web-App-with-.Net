// <auto-generated />
using System;
using Lab.Infrasturcture.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab.Infrasturcture.Migrations
{
    [DbContext(typeof(LabAppDbContext))]
    [Migration("20250120215407_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Lab.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DoctorName")
                        .HasColumnType("longtext");

                    b.Property<string>("DoctorSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("LabId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Specialization")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Lab.Domain.Entities.Lab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("LabName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Lab");
                });

            modelBuilder.Entity("Lab.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DiagnosisDetail")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LabId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PatientDiagnosis")
                        .HasColumnType("longtext");

                    b.Property<string>("PatientMail")
                        .HasColumnType("longtext");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("PatientPhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("PatientSurname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReportNumber")
                        .HasColumnType("int");

                    b.Property<string>("ReportPicture")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LabId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Lab.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Lab.Domain.Entities.Lab", "Lab")
                        .WithMany("Doctors")
                        .HasForeignKey("LabId");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Lab.Domain.Entities.Report", b =>
                {
                    b.HasOne("Lab.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Reports")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab.Domain.Entities.Lab", "Lab")
                        .WithMany("Reports")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Lab.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Lab.Domain.Entities.Lab", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
